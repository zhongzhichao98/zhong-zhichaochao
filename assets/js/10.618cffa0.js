(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{365:function(t,a,s){t.exports=s.p+"assets/img/200(31).94265644.png"},366:function(t,a,s){t.exports=s.p+"assets/img/200(32).d9d2930b.png"},367:function(t,a,s){t.exports=s.p+"assets/img/200(33).ca806db8.png"},368:function(t,a,s){t.exports=s.p+"assets/img/200(34).86df6667.png"},369:function(t,a,s){t.exports=s.p+"assets/img/200(35).8935475a.png"},370:function(t,a,s){t.exports=s.p+"assets/img/200(36).80f3eb37.png"},371:function(t,a,s){t.exports=s.p+"assets/img/200(37).039b5a21.png"},503:function(t,a,s){"use strict";s.r(a);var e=s(10),i=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-什么是pinia"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是pinia"}},[t._v("#")]),t._v(" 1. 什么是Pinia")]),t._v(" "),a("p",[t._v("Pinia 是 Vue 的专属的最新状态管理库 ，是 Vuex 状态管理工具的替代品\n"),a("img",{attrs:{src:s(365),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_2-手动添加pinia到vue项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-手动添加pinia到vue项目"}},[t._v("#")]),t._v(" 2. 手动添加Pinia到Vue项目")]),t._v(" "),a("p",[t._v("后面在实际开发Vue医疗项目的时候，Pinia可以在项目创建时自动添加，现在我们初次学习，从零开始：")]),t._v(" "),a("ol",[a("li",[t._v("使用 Vite 创建一个空的TS + Vue3项目")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" create vite@latest  vue-pinia-ts -- "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--template")]),t._v(" vue-ts  \n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("按照官方文档安装 pinia 到项目中")])]),t._v(" "),a("h2",{attrs:{id:"_3-pinia基础使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-pinia基础使用"}},[t._v("#")]),t._v(" 3. Pinia基础使用")]),t._v(" "),a("ol",[a("li",[t._v("定义store")]),t._v(" "),a("li",[t._v("组件使用store")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(366),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_4-getters实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-getters实现"}},[t._v("#")]),t._v(" 4. getters实现")]),t._v(" "),a("p",[t._v("Pinia中的 getters 直接使用 computed函数 进行模拟, 组件中需要使用需要把 getters return出去")]),t._v(" "),a("p",[a("img",{attrs:{src:s(367),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_5-action异步实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-action异步实现"}},[t._v("#")]),t._v(" 5. action异步实现")]),t._v(" "),a("p",[t._v("方式：异步action函数的写法和组件中获取异步数据的写法完全一致\n"),a("img",{attrs:{src:s(368),alt:"image.png"}})]),t._v(" "),a("p",[t._v("需求：在Pinia中获取频道列表数据并把数据渲染App组件的模板中\n"),a("img",{attrs:{src:s(369),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_6-storetorefs工具函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-storetorefs工具函数"}},[t._v("#")]),t._v(" 6. storeToRefs工具函数")]),t._v(" "),a("p",[t._v("使用storeToRefs函数可以辅助保持数据（state + getter）的响应式解构\n"),a("img",{attrs:{src:s(370),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"_7-pinia的调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-pinia的调试"}},[t._v("#")]),t._v(" 7. Pinia的调试")]),t._v(" "),a("p",[t._v("Vue官方的 dev-tools 调试工具 对 Pinia直接支持，可以直接进行调试\n"),a("img",{attrs:{src:s(371),alt:"image.png"}})])])}),[],!1,null,null,null);a.default=i.exports}}]);